# Requires
fastlane_version '2.159.0'

skip_docs
default_platform(:ios)

# Constants

ROOT_PROJECT_PATH = File.expand_path("../", Dir.pwd)
TMP_ROOT_PATH = File.join(ROOT_PROJECT_PATH, "tmp")
BUILD_OUTPUT_PATH = File.join(TMP_ROOT_PATH, "build")
TEST_OUTPUT_PATH = File.join(TMP_ROOT_PATH, "test_output")

MISTICA_LIB_PROJECT_PATH = File.join(ROOT_PROJECT_PATH, "Mistica.xcodeproj")
MISTICA_CATALOG_PROJECT_PATH = File.join(ROOT_PROJECT_PATH, "MisticaCatalog", "MisticaCatalog.xcodeproj")
MISTICA_CATALOG_INFO_PLIST_PATH = File.join(ROOT_PROJECT_PATH, "MisticaCatalog", "SupportFiles", "Info.plist")
MISTICA_CATALOG_IPA_PATH = File.join(BUILD_OUTPUT_PATH, "MisticaCatalog.ipa")

XCRESULT_FILE_PATH = File.join(TEST_OUTPUT_PATH, "Mistica.xcresult")
SCREENSHOT_DIFFS_OUTPUT_PATH = File.join(TEST_OUTPUT_PATH, "diff_output")

DEVICES_USED_FOR_TESTING = ["iPhone 11"]

platform :ios do

  before_all do
    xcversion(version: "12")
  end

  desc "Setup the external dependencies and stuff needed to have a full working environment experience"  
  lane :setup do
    UI.message "Installing homebrew"
    
    if system("which -s brew;")
      UI.success "Homebrew already installed"
    else
      system('CI=1 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"')
    end

    UI.message "Installing carthage"
    brew_install_or_update(
      formula: "carthage"
    )

    UI.message "Carthage update and build"
    Dir.chdir("..") do
      sh("./scripts/carthage-build.sh")
    end
  end

  desc "Build Mistica catalog and upload to AppCenter"
  lane :build_and_deploy_mistica_catalog do
  	ensure_git_status_clean

  	increment_build_number_in_info_plist(
      path: MISTICA_CATALOG_INFO_PLIST_PATH
    )

  	gym(
        project: MISTICA_CATALOG_PROJECT_PATH,
        scheme: "MisticaCatalog",
        configuration: "Release",
        codesigning_identity: "iPhone Distribution: Tuenti Technologies SL",
        export_team_id: "JA666WMX28",
        output_directory: BUILD_OUTPUT_PATH,
        export_method: 'enterprise',
        clean: true
    )

    appcenter_upload(
  	  api_token: get_appcenter_api_token,
  	  owner_name: "Tuenti-Organization",
  	  app_name: "Mistica-iOS",
  	  destinations: "Public",
  	  file: MISTICA_CATALOG_IPA_PATH,
  	  release_notes: "https://github.com/Telefonica/mistica-ios/blob/master/CHANGELOG.md"
  	)

    reset_git_repo
  end

  desc "Run Tests"
  lane :test do
    scan(
      project: MISTICA_LIB_PROJECT_PATH,
      devices: DEVICES_USED_FOR_TESTING,
      output_directory: TEST_OUTPUT_PATH,
      result_bundle: true,
      concurrent_workers: 2
    )
  end

  desc "Extract tests attachments"
  lane :extract_tests_attachments do
    if File.exist?(XCRESULT_FILE_PATH)
      UI.message "Installing xcparse"
      brew_install_or_update(
        formula: "chargepoint/xcparse/xcparse"
      )

      UI.message `xcparse attachments #{XCRESULT_FILE_PATH} #{SCREENSHOT_DIFFS_OUTPUT_PATH} --uti public.plain-text public.image --test`
    else 
      UI.message "Could not find #{XCRESULT_FILE_PATH}"
    end
  end

end

##############################################################
# Helper Functions
##############################################################

def increment_build_number_in_info_plist(params)
  today = Time.now.strftime('%Y%m%d%H%M')

	set_info_plist_value(
		path: params[:path],
		key: "CFBundleVersion",
		value: today
	)
end

def get_appcenter_api_token
	UI.header "AppCenter API Token"

	appcenter_api_token = ENV['APPCENTER_API_TOKEN'] ||`git config --local --get appcenter.apitoken`.strip

	if appcenter_api_token.empty?
		appcenter_api_token = UI.input("No AppCenter user API token found., Which is your AppCenter user API token? ")

		`git config --local appcenter.apitoken #{appcenter_api_token}`
	else
		UI.success "AppCenter API token configured :)"
   end

   return appcenter_api_token
end

def brew_install_or_update(params)
  if system("brew ls --versions #{params[:formula]} >/dev/null;")
    UI.message "Updating brew formula #{params[:formula]}"
    system("brew upgrade #{params[:formula]}")
  else
    UI.message "Installing brew formula #{params[:formula]}"
    system("brew install #{params[:formula]}")
  end
end

